/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { Namespace } from "../packages/plugins/x-dxp/src/models/namespace";
import { Experience } from "../packages/plugins/x-dxp/src";
import { Comparison } from "../packages/plugins/x-dxp/src/services/experience.data.parser";
import { ActionActivationStrategy, ActionEvent, AudioTrack, CookieConsent, DataProviderRegistration as DataProviderRegistration1, DiscardStrategy, LoadStrategy } from "../packages/core/src";
import { ActionEvent as ActionEvent1, DataProviderRegistration } from "@viewdo/x-ui";
import { HistoryType, VisitStrategy } from "../packages/core/src/services";
export namespace Components {
    interface DxpActionListener {
        /**
          * When debug is true, a reactive table of values is displayed.
         */
        "debug": boolean;
        /**
          * Customize the name used for this sample data provider.
         */
        "name": string;
    }
    interface DxpData {
        /**
          * A default value to display if the data in get is not found.
         */
        "default": string;
        /**
          * The JS-based expression to capture data from the above model.
          * @example experience.data.color
         */
        "get": string;
        /**
          * A pipe separated list of modifier expressions to modify the captured data. clip:<length>    truncate:<length>   date   format:<expression>   lowercase   uppercase   capitalize   size   encode   currency
          * @example clip:5|capitalize
         */
        "modify": string;
    }
    interface DxpExperience {
        /**
          * Enable Debug mode to prevent API calls. (falls back to ?debug )
          * @default false
         */
        "debug": boolean;
        /**
          * Display mode for this element.
          * @default none
         */
        "display": 'logo' | 'debug' | 'none';
        /**
          * Experience data (bypasses XAPI to retrieve it)
         */
        "experienceData": string;
        /**
          * This method gets waits for the experience.
         */
        "getExperience": (timeout: number) => Promise<Experience>;
        /**
          * Enable Debug mode to prevent API calls.
          * @default false
         */
        "loadAssets": boolean;
        /**
          * The platform environment target. (optional)
         */
        "namespace": Namespace;
        /**
          * Enable preview mode to fake data and prevent API calls. (falls back to ?preview )
          * @default false
         */
        "preview": boolean;
        /**
          * This method resets the stored session-id & experience-key, effectively resetting the current experience. Useful for testing or dynamically switching experiences in-page.
         */
        "reset": () => Promise<void>;
        /**
          * Story Key (falls back to ?storyKey )
         */
        "storyKey": string;
        /**
          * User Key (falls back to ?userKey )
         */
        "userKey": string;
        /**
          * Experience API Url (optional)
         */
        "xapiUrl": string;
    }
    interface DxpExperienceDemo {
    }
    interface DxpShow {
        /**
          * A JS-based expression to capture data from the the data model.
          * @example : experience.data.color
         */
        "if": string;
        /**
          * The optional comparison operator. If omitted, general ‘truthiness’ is used.
          * @requires to
         */
        "is": Comparison;
        /**
          * The optional value for comparison.
          * @requires is
         */
        "to": any;
    }
    interface XAction {
        /**
          * The command to execute.
         */
        "command": string;
        /**
          * The JSON serializable data payload the command requires.
         */
        "data": string;
        /**
          * Get the underlying actionEvent instance. Used by the x-action-activator element.
         */
        "getAction": () => Promise<ActionEvent<any>>;
        /**
          * This is the topic this action-command is targeting.
         */
        "topic": 'data'|'routing'|'document';
    }
    interface XActionActivator {
        /**
          * The activation strategy to use for the contained actions.
         */
        "activate": ActionActivationStrategy;
        "activateActions": () => Promise<void>;
        /**
          * Turn on debug statements for load, update and render events.
         */
        "debug": boolean;
        /**
          * The element to watch for events when using the OnElementEvent activation strategy. This element uses the HTML Element querySelector function to find the element.  For use with activate="OnElementEvent" Only!
         */
        "targetElement"?: string;
        /**
          * This is the name of the event to listen to on the target element.
         */
        "targetEvent": string;
        /**
          * The time, in seconds at which the contained actions should be submitted.  For use with activate="AtTime" Only!
         */
        "time"?: number;
    }
    interface XAudioLoadMusic {
        /**
          * The discard strategy the player should use for this file.
         */
        "discard": DiscardStrategy;
        /**
          * Get the underlying actionEvent instance. Used by the x-action-activator element.
         */
        "getAction": () => Promise<ActionEvent<AudioTrack>>;
        /**
          * This is the topic this action-command is targeting.
         */
        "load": LoadStrategy;
        /**
          * Set this to true to have the audio file loop.
         */
        "loop": boolean;
        /**
          * The path to the audio-file.
          * @required
         */
        "src": string;
        /**
          * Set this attribute to have the audio file tracked in session effectively preventing it from playing again..
         */
        "track": boolean;
        /**
          * The identifier for this music track
         */
        "trackId": string;
    }
    interface XAudioLoadSound {
        /**
          * The discard strategy the player should use for this file.
         */
        "discard": DiscardStrategy;
        /**
          * Get the underlying actionEvent instance. Used by the x-action-activator element.
         */
        "getAction": () => Promise<ActionEvent<AudioTrack>>;
        /**
          * This is the topic this action-command is targeting.
         */
        "load": LoadStrategy;
        /**
          * The path to the audio-file.
          * @required
         */
        "src": string;
        /**
          * Set this attribute to have the audio file tracked in session effectively preventing it from playing again..
         */
        "track": boolean;
        /**
          * The identifier for this music track
         */
        "trackId": string;
    }
    interface XAudioPlayer {
    }
    interface XAutoplayToggle {
        "autoplay": boolean;
    }
    interface XDataDisplay {
        /**
          * If set, disables auto-rendering of this instance. To fetch the contents change to false or remove attribute.
         */
        "noRender": boolean;
        /**
          * The data expression to obtain a value for rendering as inner-text for this element.
          * @example {session:user.name}
          * @default null
         */
        "text"?: string;
    }
    interface XDataProvider {
        /**
          * When debug is true, a reactive table of values is displayed.
         */
        "debug": boolean;
        /**
          * Customize the name used for this sample data provider.
         */
        "name": string;
    }
    interface XDataProviderCookie {
        /**
          * An expression that tells this component how to determine if the user has previously consented.
          * @example {storage:consented}
         */
        "hideWhen": string;
        /**
          * When skipConsent is true, the accept-cookies banner will not be displayed before accessing cookie-data.
         */
        "skipConsent": boolean;
    }
    interface XDataRepeat {
        /**
          * Turn on debug statements for load, update and render events.
         */
        "debug": boolean;
        /**
          * The array-string or data expression to obtain a collection for rendering the template.
          * @example {session:cartItems}
         */
        "items"?: string;
        /**
          * The URL to remote JSON collection to use for the items.
          * @example {session:user.name}
         */
        "itemsSrc"?: string;
        /**
          * If set, disables auto-rendering of this instance. To fetch the contents change to false or remove attribute.
         */
        "noRender": boolean;
    }
    interface XInclude {
        /**
          * If set, disables auto-rendering of this instance. To fetch the contents change to false or remove attribute.
         */
        "noRender": boolean;
        /**
          * Remote Template URL
          * @required
         */
        "src": string;
    }
    interface XLink {
        "activeClass": string;
        "anchorClass"?: string;
        "anchorId"?: string;
        "anchorRole"?: string;
        "anchorTabIndex"?: string;
        "anchorTitle"?: string;
        "ariaHaspopup"?: string;
        "ariaLabel"?: string;
        "ariaPosinset"?: string;
        "ariaSetsize"?: number;
        "custom": string;
        "exact": boolean;
        "href": string;
        "strict": boolean;
    }
    interface XMarkdown {
        /**
          * If set, disables auto-rendering of this instance. To fetch the contents change to false or remove attribute.
         */
        "noRender": boolean;
        /**
          * Remote Template URL
         */
        "src": string;
    }
    interface XPreferencesList {
    }
    interface XPreferencesPopoverButton {
        "icon": string;
    }
    interface XShow {
        /**
          * The data expression to obtain a predicate for conditionally rendering the inner-contents of this element.
          * @example {session:user.name}
         */
        "when": string;
    }
    interface XSoundToggle {
        "muted": boolean;
    }
    interface XThemeToggle {
    }
    interface XUi {
        /**
          * This is the application / site title. If the views or dos have titles, this is added as a suffix.
         */
        "appTitle": string;
        /**
          * Turn on debugging to get helpful messages from the routing, data and action systems.
         */
        "debug": boolean;
        /**
          * Set this to false if you don't want the UI component to take up the full page size.   *
         */
        "fullPage": boolean;
        /**
          * Browser (paths) or Hash (#) routing. To support browser history, the HTTP server must be setup for a PWA
         */
        "historyType": HistoryType;
        /**
          * This is the root path that the actual page is, if it isn't '/', then the router needs to know where to begin creating paths.
         */
        "root": string;
        /**
          * Header height or offset for scroll-top on this and all views.
         */
        "scrollTopOffset"?: number;
        /**
          * This is the start path a user should land on when they first land on this app.
         */
        "startUrl": string;
        /**
          * Navigation transition between routes. This is a CSS animation class.
         */
        "transition": string;
    }
    interface XUse {
        "cssSrc": string;
        "inline": boolean;
        "scriptSrc": string;
    }
    interface XView {
        /**
          * Remote URL for this Route's content.
         */
        "contentSrc": string;
        /**
          * Turn on debug statements for load, update and render events.
         */
        "debug": boolean;
        /**
          * The title for this view. This is prefixed before the app title configured in x-ui
         */
        "pageTitle": string;
        /**
          * Header height or offset for scroll-top on this view.
         */
        "scrollTopOffset"?: number;
        /**
          * Navigation transition between routes. This is a CSS animation class.
         */
        "transition"?: string;
        /**
          * The url for this route, including the parent's routes.
         */
        "url": string;
    }
    interface XViewDo {
        /**
          * Remote URL for this Route's content.
         */
        "contentSrc": string;
        /**
          * To debug timed elements, set this value to true.
         */
        "debug": boolean;
        /**
          * Set a duration for this view. When this value exists, the page will automatically progress when the duration in seconds has passed.
         */
        "duration"?: number;
        /**
          * The title for this view. This is prefixed before the app title configured in x-ui
         */
        "pageTitle": string;
        /**
          * Header height or offset for scroll-top on this view.
         */
        "scrollTopOffset"?: number;
        /**
          * Navigation transition between routes. This is a CSS animation class.
         */
        "transition"?: string;
        /**
          * The url for this route, including the parent's routes.
         */
        "url": string;
        /**
          * The visit strategy for this do. once: persist the visit and never force it again always: do not persist, but don't don't show again in-session optional: do not force this view-do ever. It will be available by URL
         */
        "visit": VisitStrategy;
        /**
          * If present, the expression must evaluate to true for this route to be sequenced by the parent view. The existence of this value overrides the visit strategy
         */
        "when"?: string;
    }
}
declare global {
    interface HTMLDxpActionListenerElement extends Components.DxpActionListener, HTMLStencilElement {
    }
    var HTMLDxpActionListenerElement: {
        prototype: HTMLDxpActionListenerElement;
        new (): HTMLDxpActionListenerElement;
    };
    interface HTMLDxpDataElement extends Components.DxpData, HTMLStencilElement {
    }
    var HTMLDxpDataElement: {
        prototype: HTMLDxpDataElement;
        new (): HTMLDxpDataElement;
    };
    interface HTMLDxpExperienceElement extends Components.DxpExperience, HTMLStencilElement {
    }
    var HTMLDxpExperienceElement: {
        prototype: HTMLDxpExperienceElement;
        new (): HTMLDxpExperienceElement;
    };
    interface HTMLDxpExperienceDemoElement extends Components.DxpExperienceDemo, HTMLStencilElement {
    }
    var HTMLDxpExperienceDemoElement: {
        prototype: HTMLDxpExperienceDemoElement;
        new (): HTMLDxpExperienceDemoElement;
    };
    interface HTMLDxpShowElement extends Components.DxpShow, HTMLStencilElement {
    }
    var HTMLDxpShowElement: {
        prototype: HTMLDxpShowElement;
        new (): HTMLDxpShowElement;
    };
    interface HTMLXActionElement extends Components.XAction, HTMLStencilElement {
    }
    var HTMLXActionElement: {
        prototype: HTMLXActionElement;
        new (): HTMLXActionElement;
    };
    interface HTMLXActionActivatorElement extends Components.XActionActivator, HTMLStencilElement {
    }
    var HTMLXActionActivatorElement: {
        prototype: HTMLXActionActivatorElement;
        new (): HTMLXActionActivatorElement;
    };
    interface HTMLXAudioLoadMusicElement extends Components.XAudioLoadMusic, HTMLStencilElement {
    }
    var HTMLXAudioLoadMusicElement: {
        prototype: HTMLXAudioLoadMusicElement;
        new (): HTMLXAudioLoadMusicElement;
    };
    interface HTMLXAudioLoadSoundElement extends Components.XAudioLoadSound, HTMLStencilElement {
    }
    var HTMLXAudioLoadSoundElement: {
        prototype: HTMLXAudioLoadSoundElement;
        new (): HTMLXAudioLoadSoundElement;
    };
    interface HTMLXAudioPlayerElement extends Components.XAudioPlayer, HTMLStencilElement {
    }
    var HTMLXAudioPlayerElement: {
        prototype: HTMLXAudioPlayerElement;
        new (): HTMLXAudioPlayerElement;
    };
    interface HTMLXAutoplayToggleElement extends Components.XAutoplayToggle, HTMLStencilElement {
    }
    var HTMLXAutoplayToggleElement: {
        prototype: HTMLXAutoplayToggleElement;
        new (): HTMLXAutoplayToggleElement;
    };
    interface HTMLXDataDisplayElement extends Components.XDataDisplay, HTMLStencilElement {
    }
    var HTMLXDataDisplayElement: {
        prototype: HTMLXDataDisplayElement;
        new (): HTMLXDataDisplayElement;
    };
    interface HTMLXDataProviderElement extends Components.XDataProvider, HTMLStencilElement {
    }
    var HTMLXDataProviderElement: {
        prototype: HTMLXDataProviderElement;
        new (): HTMLXDataProviderElement;
    };
    interface HTMLXDataProviderCookieElement extends Components.XDataProviderCookie, HTMLStencilElement {
    }
    var HTMLXDataProviderCookieElement: {
        prototype: HTMLXDataProviderCookieElement;
        new (): HTMLXDataProviderCookieElement;
    };
    interface HTMLXDataRepeatElement extends Components.XDataRepeat, HTMLStencilElement {
    }
    var HTMLXDataRepeatElement: {
        prototype: HTMLXDataRepeatElement;
        new (): HTMLXDataRepeatElement;
    };
    interface HTMLXIncludeElement extends Components.XInclude, HTMLStencilElement {
    }
    var HTMLXIncludeElement: {
        prototype: HTMLXIncludeElement;
        new (): HTMLXIncludeElement;
    };
    interface HTMLXLinkElement extends Components.XLink, HTMLStencilElement {
    }
    var HTMLXLinkElement: {
        prototype: HTMLXLinkElement;
        new (): HTMLXLinkElement;
    };
    interface HTMLXMarkdownElement extends Components.XMarkdown, HTMLStencilElement {
    }
    var HTMLXMarkdownElement: {
        prototype: HTMLXMarkdownElement;
        new (): HTMLXMarkdownElement;
    };
    interface HTMLXPreferencesListElement extends Components.XPreferencesList, HTMLStencilElement {
    }
    var HTMLXPreferencesListElement: {
        prototype: HTMLXPreferencesListElement;
        new (): HTMLXPreferencesListElement;
    };
    interface HTMLXPreferencesPopoverButtonElement extends Components.XPreferencesPopoverButton, HTMLStencilElement {
    }
    var HTMLXPreferencesPopoverButtonElement: {
        prototype: HTMLXPreferencesPopoverButtonElement;
        new (): HTMLXPreferencesPopoverButtonElement;
    };
    interface HTMLXShowElement extends Components.XShow, HTMLStencilElement {
    }
    var HTMLXShowElement: {
        prototype: HTMLXShowElement;
        new (): HTMLXShowElement;
    };
    interface HTMLXSoundToggleElement extends Components.XSoundToggle, HTMLStencilElement {
    }
    var HTMLXSoundToggleElement: {
        prototype: HTMLXSoundToggleElement;
        new (): HTMLXSoundToggleElement;
    };
    interface HTMLXThemeToggleElement extends Components.XThemeToggle, HTMLStencilElement {
    }
    var HTMLXThemeToggleElement: {
        prototype: HTMLXThemeToggleElement;
        new (): HTMLXThemeToggleElement;
    };
    interface HTMLXUiElement extends Components.XUi, HTMLStencilElement {
    }
    var HTMLXUiElement: {
        prototype: HTMLXUiElement;
        new (): HTMLXUiElement;
    };
    interface HTMLXUseElement extends Components.XUse, HTMLStencilElement {
    }
    var HTMLXUseElement: {
        prototype: HTMLXUseElement;
        new (): HTMLXUseElement;
    };
    interface HTMLXViewElement extends Components.XView, HTMLStencilElement {
    }
    var HTMLXViewElement: {
        prototype: HTMLXViewElement;
        new (): HTMLXViewElement;
    };
    interface HTMLXViewDoElement extends Components.XViewDo, HTMLStencilElement {
    }
    var HTMLXViewDoElement: {
        prototype: HTMLXViewDoElement;
        new (): HTMLXViewDoElement;
    };
    interface HTMLElementTagNameMap {
        "dxp-action-listener": HTMLDxpActionListenerElement;
        "dxp-data": HTMLDxpDataElement;
        "dxp-experience": HTMLDxpExperienceElement;
        "dxp-experience-demo": HTMLDxpExperienceDemoElement;
        "dxp-show": HTMLDxpShowElement;
        "x-action": HTMLXActionElement;
        "x-action-activator": HTMLXActionActivatorElement;
        "x-audio-load-music": HTMLXAudioLoadMusicElement;
        "x-audio-load-sound": HTMLXAudioLoadSoundElement;
        "x-audio-player": HTMLXAudioPlayerElement;
        "x-autoplay-toggle": HTMLXAutoplayToggleElement;
        "x-data-display": HTMLXDataDisplayElement;
        "x-data-provider": HTMLXDataProviderElement;
        "x-data-provider-cookie": HTMLXDataProviderCookieElement;
        "x-data-repeat": HTMLXDataRepeatElement;
        "x-include": HTMLXIncludeElement;
        "x-link": HTMLXLinkElement;
        "x-markdown": HTMLXMarkdownElement;
        "x-preferences-list": HTMLXPreferencesListElement;
        "x-preferences-popover-button": HTMLXPreferencesPopoverButtonElement;
        "x-show": HTMLXShowElement;
        "x-sound-toggle": HTMLXSoundToggleElement;
        "x-theme-toggle": HTMLXThemeToggleElement;
        "x-ui": HTMLXUiElement;
        "x-use": HTMLXUseElement;
        "x-view": HTMLXViewElement;
        "x-view-do": HTMLXViewDoElement;
    }
}
declare namespace LocalJSX {
    interface DxpActionListener {
        /**
          * When debug is true, a reactive table of values is displayed.
         */
        "debug"?: boolean;
        /**
          * Customize the name used for this sample data provider.
         */
        "name"?: string;
    }
    interface DxpData {
        /**
          * A default value to display if the data in get is not found.
         */
        "default"?: string;
        /**
          * The JS-based expression to capture data from the above model.
          * @example experience.data.color
         */
        "get": string;
        /**
          * A pipe separated list of modifier expressions to modify the captured data. clip:<length>    truncate:<length>   date   format:<expression>   lowercase   uppercase   capitalize   size   encode   currency
          * @example clip:5|capitalize
         */
        "modify"?: string;
    }
    interface DxpExperience {
        /**
          * Enable Debug mode to prevent API calls. (falls back to ?debug )
          * @default false
         */
        "debug"?: boolean;
        /**
          * Display mode for this element.
          * @default none
         */
        "display"?: 'logo' | 'debug' | 'none';
        /**
          * Experience data (bypasses XAPI to retrieve it)
         */
        "experienceData"?: string;
        /**
          * Enable Debug mode to prevent API calls.
          * @default false
         */
        "loadAssets"?: boolean;
        /**
          * The platform environment target. (optional)
         */
        "namespace"?: Namespace;
        /**
          * When an experience is unable to be retrieved, this event fires with 'event.detail' = error message.
         */
        "onDxp:errored"?: (event: CustomEvent<string>) => void;
        /**
          * When an experience is retrieved, this event fires with 'event.detail' being the full experience, w/ data methods like 'setData()' and 'setComplete()'.
         */
        "onDxp:initialized"?: (event: CustomEvent<Experience>) => void;
        /**
          * This event is raised when reset() is called.
         */
        "onDxp:reset"?: (event: CustomEvent<void>) => void;
        /**
          * Enable preview mode to fake data and prevent API calls. (falls back to ?preview )
          * @default false
         */
        "preview"?: boolean;
        /**
          * Story Key (falls back to ?storyKey )
         */
        "storyKey"?: string;
        /**
          * User Key (falls back to ?userKey )
         */
        "userKey"?: string;
        /**
          * Experience API Url (optional)
         */
        "xapiUrl"?: string;
    }
    interface DxpExperienceDemo {
    }
    interface DxpShow {
        /**
          * A JS-based expression to capture data from the the data model.
          * @example : experience.data.color
         */
        "if": string;
        /**
          * The optional comparison operator. If omitted, general ‘truthiness’ is used.
          * @requires to
         */
        "is"?: Comparison;
        /**
          * The optional value for comparison.
          * @requires is
         */
        "to"?: any;
    }
    interface XAction {
        /**
          * The command to execute.
         */
        "command"?: string;
        /**
          * The JSON serializable data payload the command requires.
         */
        "data"?: string;
        /**
          * This is the topic this action-command is targeting.
         */
        "topic"?: 'data'|'routing'|'document';
    }
    interface XActionActivator {
        /**
          * The activation strategy to use for the contained actions.
         */
        "activate": ActionActivationStrategy;
        /**
          * Turn on debug statements for load, update and render events.
         */
        "debug"?: boolean;
        /**
          * The element to watch for events when using the OnElementEvent activation strategy. This element uses the HTML Element querySelector function to find the element.  For use with activate="OnElementEvent" Only!
         */
        "targetElement"?: string;
        /**
          * This is the name of the event to listen to on the target element.
         */
        "targetEvent"?: string;
        /**
          * The time, in seconds at which the contained actions should be submitted.  For use with activate="AtTime" Only!
         */
        "time"?: number;
    }
    interface XAudioLoadMusic {
        /**
          * The discard strategy the player should use for this file.
         */
        "discard"?: DiscardStrategy;
        /**
          * This is the topic this action-command is targeting.
         */
        "load"?: LoadStrategy;
        /**
          * Set this to true to have the audio file loop.
         */
        "loop"?: boolean;
        /**
          * The path to the audio-file.
          * @required
         */
        "src": string;
        /**
          * Set this attribute to have the audio file tracked in session effectively preventing it from playing again..
         */
        "track"?: boolean;
        /**
          * The identifier for this music track
         */
        "trackId"?: string;
    }
    interface XAudioLoadSound {
        /**
          * The discard strategy the player should use for this file.
         */
        "discard"?: DiscardStrategy;
        /**
          * This is the topic this action-command is targeting.
         */
        "load"?: LoadStrategy;
        /**
          * The path to the audio-file.
          * @required
         */
        "src": string;
        /**
          * Set this attribute to have the audio file tracked in session effectively preventing it from playing again..
         */
        "track"?: boolean;
        /**
          * The identifier for this music track
         */
        "trackId"?: string;
    }
    interface XAudioPlayer {
    }
    interface XAutoplayToggle {
        "autoplay"?: boolean;
    }
    interface XDataDisplay {
        /**
          * If set, disables auto-rendering of this instance. To fetch the contents change to false or remove attribute.
         */
        "noRender"?: boolean;
        /**
          * The data expression to obtain a value for rendering as inner-text for this element.
          * @example {session:user.name}
          * @default null
         */
        "text"?: string;
    }
    interface XDataProvider {
        /**
          * When debug is true, a reactive table of values is displayed.
         */
        "debug"?: boolean;
        /**
          * Customize the name used for this sample data provider.
         */
        "name"?: string;
        /**
          * This event is raised when the component loads. The data-provider system should capture this event and register the provider for use in expressions.
         */
        "onRegister"?: (event: CustomEvent<ActionEvent<DataProviderRegistration>>) => void;
    }
    interface XDataProviderCookie {
        /**
          * An expression that tells this component how to determine if the user has previously consented.
          * @example {storage:consented}
         */
        "hideWhen"?: string;
        /**
          * This event is raised when the component obtains consent from the user to use cookies. The data-provider system should capture this event and register the provider for use in expressions.
         */
        "onActionEvent"?: (event: CustomEvent<ActionEvent<DataProviderRegistration>>) => void;
        /**
          * This event is raised when the consents to cookies.
         */
        "onDidConsent"?: (event: CustomEvent<CookieConsent>) => void;
        /**
          * When skipConsent is true, the accept-cookies banner will not be displayed before accessing cookie-data.
         */
        "skipConsent"?: boolean;
    }
    interface XDataRepeat {
        /**
          * Turn on debug statements for load, update and render events.
         */
        "debug"?: boolean;
        /**
          * The array-string or data expression to obtain a collection for rendering the template.
          * @example {session:cartItems}
         */
        "items"?: string;
        /**
          * The URL to remote JSON collection to use for the items.
          * @example {session:user.name}
         */
        "itemsSrc"?: string;
        /**
          * If set, disables auto-rendering of this instance. To fetch the contents change to false or remove attribute.
         */
        "noRender"?: boolean;
    }
    interface XInclude {
        /**
          * If set, disables auto-rendering of this instance. To fetch the contents change to false or remove attribute.
         */
        "noRender"?: boolean;
        /**
          * Remote Template URL
          * @required
         */
        "src"?: string;
    }
    interface XLink {
        "activeClass"?: string;
        "anchorClass"?: string;
        "anchorId"?: string;
        "anchorRole"?: string;
        "anchorTabIndex"?: string;
        "anchorTitle"?: string;
        "ariaHaspopup"?: string;
        "ariaLabel"?: string;
        "ariaPosinset"?: string;
        "ariaSetsize"?: number;
        "custom"?: string;
        "exact"?: boolean;
        "href": string;
        "strict"?: boolean;
    }
    interface XMarkdown {
        /**
          * If set, disables auto-rendering of this instance. To fetch the contents change to false or remove attribute.
         */
        "noRender"?: boolean;
        /**
          * Remote Template URL
         */
        "src"?: string;
    }
    interface XPreferencesList {
    }
    interface XPreferencesPopoverButton {
        "icon"?: string;
    }
    interface XShow {
        /**
          * The data expression to obtain a predicate for conditionally rendering the inner-contents of this element.
          * @example {session:user.name}
         */
        "when": string;
    }
    interface XSoundToggle {
        "muted"?: boolean;
    }
    interface XThemeToggle {
    }
    interface XUi {
        /**
          * This is the application / site title. If the views or dos have titles, this is added as a suffix.
         */
        "appTitle"?: string;
        /**
          * Turn on debugging to get helpful messages from the routing, data and action systems.
         */
        "debug"?: boolean;
        /**
          * Set this to false if you don't want the UI component to take up the full page size.   *
         */
        "fullPage"?: boolean;
        /**
          * Browser (paths) or Hash (#) routing. To support browser history, the HTTP server must be setup for a PWA
         */
        "historyType"?: HistoryType;
        /**
          * Listen to all XUI events here.
         */
        "onInnerEvents"?: (event: CustomEvent<any>) => void;
        /**
          * Listen to all XUI events here.
         */
        "onRouteChanged"?: (event: CustomEvent<any>) => void;
        /**
          * This is the root path that the actual page is, if it isn't '/', then the router needs to know where to begin creating paths.
         */
        "root"?: string;
        /**
          * Header height or offset for scroll-top on this and all views.
         */
        "scrollTopOffset"?: number;
        /**
          * This is the start path a user should land on when they first land on this app.
         */
        "startUrl"?: string;
        /**
          * Navigation transition between routes. This is a CSS animation class.
         */
        "transition"?: string;
    }
    interface XUse {
        "cssSrc"?: string;
        "inline"?: boolean;
        "scriptSrc"?: string;
    }
    interface XView {
        /**
          * Remote URL for this Route's content.
         */
        "contentSrc"?: string;
        /**
          * Turn on debug statements for load, update and render events.
         */
        "debug"?: boolean;
        /**
          * The title for this view. This is prefixed before the app title configured in x-ui
         */
        "pageTitle"?: string;
        /**
          * Header height or offset for scroll-top on this view.
         */
        "scrollTopOffset"?: number;
        /**
          * Navigation transition between routes. This is a CSS animation class.
         */
        "transition"?: string;
        /**
          * The url for this route, including the parent's routes.
         */
        "url"?: string;
    }
    interface XViewDo {
        /**
          * Remote URL for this Route's content.
         */
        "contentSrc"?: string;
        /**
          * To debug timed elements, set this value to true.
         */
        "debug"?: boolean;
        /**
          * Set a duration for this view. When this value exists, the page will automatically progress when the duration in seconds has passed.
         */
        "duration"?: number;
        /**
          * The title for this view. This is prefixed before the app title configured in x-ui
         */
        "pageTitle"?: string;
        /**
          * Header height or offset for scroll-top on this view.
         */
        "scrollTopOffset"?: number;
        /**
          * Navigation transition between routes. This is a CSS animation class.
         */
        "transition"?: string;
        /**
          * The url for this route, including the parent's routes.
         */
        "url": string;
        /**
          * The visit strategy for this do. once: persist the visit and never force it again always: do not persist, but don't don't show again in-session optional: do not force this view-do ever. It will be available by URL
         */
        "visit"?: VisitStrategy;
        /**
          * If present, the expression must evaluate to true for this route to be sequenced by the parent view. The existence of this value overrides the visit strategy
         */
        "when"?: string;
    }
    interface IntrinsicElements {
        "dxp-action-listener": DxpActionListener;
        "dxp-data": DxpData;
        "dxp-experience": DxpExperience;
        "dxp-experience-demo": DxpExperienceDemo;
        "dxp-show": DxpShow;
        "x-action": XAction;
        "x-action-activator": XActionActivator;
        "x-audio-load-music": XAudioLoadMusic;
        "x-audio-load-sound": XAudioLoadSound;
        "x-audio-player": XAudioPlayer;
        "x-autoplay-toggle": XAutoplayToggle;
        "x-data-display": XDataDisplay;
        "x-data-provider": XDataProvider;
        "x-data-provider-cookie": XDataProviderCookie;
        "x-data-repeat": XDataRepeat;
        "x-include": XInclude;
        "x-link": XLink;
        "x-markdown": XMarkdown;
        "x-preferences-list": XPreferencesList;
        "x-preferences-popover-button": XPreferencesPopoverButton;
        "x-show": XShow;
        "x-sound-toggle": XSoundToggle;
        "x-theme-toggle": XThemeToggle;
        "x-ui": XUi;
        "x-use": XUse;
        "x-view": XView;
        "x-view-do": XViewDo;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "dxp-action-listener": LocalJSX.DxpActionListener & JSXBase.HTMLAttributes<HTMLDxpActionListenerElement>;
            "dxp-data": LocalJSX.DxpData & JSXBase.HTMLAttributes<HTMLDxpDataElement>;
            "dxp-experience": LocalJSX.DxpExperience & JSXBase.HTMLAttributes<HTMLDxpExperienceElement>;
            "dxp-experience-demo": LocalJSX.DxpExperienceDemo & JSXBase.HTMLAttributes<HTMLDxpExperienceDemoElement>;
            "dxp-show": LocalJSX.DxpShow & JSXBase.HTMLAttributes<HTMLDxpShowElement>;
            "x-action": LocalJSX.XAction & JSXBase.HTMLAttributes<HTMLXActionElement>;
            "x-action-activator": LocalJSX.XActionActivator & JSXBase.HTMLAttributes<HTMLXActionActivatorElement>;
            "x-audio-load-music": LocalJSX.XAudioLoadMusic & JSXBase.HTMLAttributes<HTMLXAudioLoadMusicElement>;
            "x-audio-load-sound": LocalJSX.XAudioLoadSound & JSXBase.HTMLAttributes<HTMLXAudioLoadSoundElement>;
            "x-audio-player": LocalJSX.XAudioPlayer & JSXBase.HTMLAttributes<HTMLXAudioPlayerElement>;
            "x-autoplay-toggle": LocalJSX.XAutoplayToggle & JSXBase.HTMLAttributes<HTMLXAutoplayToggleElement>;
            "x-data-display": LocalJSX.XDataDisplay & JSXBase.HTMLAttributes<HTMLXDataDisplayElement>;
            "x-data-provider": LocalJSX.XDataProvider & JSXBase.HTMLAttributes<HTMLXDataProviderElement>;
            "x-data-provider-cookie": LocalJSX.XDataProviderCookie & JSXBase.HTMLAttributes<HTMLXDataProviderCookieElement>;
            "x-data-repeat": LocalJSX.XDataRepeat & JSXBase.HTMLAttributes<HTMLXDataRepeatElement>;
            "x-include": LocalJSX.XInclude & JSXBase.HTMLAttributes<HTMLXIncludeElement>;
            "x-link": LocalJSX.XLink & JSXBase.HTMLAttributes<HTMLXLinkElement>;
            "x-markdown": LocalJSX.XMarkdown & JSXBase.HTMLAttributes<HTMLXMarkdownElement>;
            "x-preferences-list": LocalJSX.XPreferencesList & JSXBase.HTMLAttributes<HTMLXPreferencesListElement>;
            "x-preferences-popover-button": LocalJSX.XPreferencesPopoverButton & JSXBase.HTMLAttributes<HTMLXPreferencesPopoverButtonElement>;
            "x-show": LocalJSX.XShow & JSXBase.HTMLAttributes<HTMLXShowElement>;
            "x-sound-toggle": LocalJSX.XSoundToggle & JSXBase.HTMLAttributes<HTMLXSoundToggleElement>;
            "x-theme-toggle": LocalJSX.XThemeToggle & JSXBase.HTMLAttributes<HTMLXThemeToggleElement>;
            "x-ui": LocalJSX.XUi & JSXBase.HTMLAttributes<HTMLXUiElement>;
            "x-use": LocalJSX.XUse & JSXBase.HTMLAttributes<HTMLXUseElement>;
            "x-view": LocalJSX.XView & JSXBase.HTMLAttributes<HTMLXViewElement>;
            "x-view-do": LocalJSX.XViewDo & JSXBase.HTMLAttributes<HTMLXViewDoElement>;
        }
    }
}
